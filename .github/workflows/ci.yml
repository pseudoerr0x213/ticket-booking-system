name: ticket-booking-ci/cd 

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, dev ]

env:
  GO_VERSION: '1.24.5'
  DOCKER_COMPOSE_VERSION: '2.20.0'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    
    services:
      postgres-user:
        image: postgres:15
        env:
          POSTGRES_DB: ticket_userdb_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      postgres-event:
        image: postgres:15
        env:
          POSTGRES_DB: ticket_eventdb_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
      
      postgres-booking:
        image: postgres:15
        env:
          POSTGRES_DB: ticket_bookingdb_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5434:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      run: |
        cd services/user-service && go mod download
        cd ../event-service && go mod download
        cd ../booking-service && go mod download

    - name: Run linter
      run: |
        cd services/user-service && golangci-lint run
        cd ../event-service && golangci-lint run
        cd ../booking-service && golangci-lint run

    - name: Run tests
      run: |
        cd services/user-service && go test -v -race -coverprofile=coverage.out ./...
        cd ../event-service && go test -v -race -coverprofile=coverage.out ./...
        cd ../booking-service && go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        files: ./services/*/coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push user-service
      uses: docker/build-push-action@v5
      with:
        context: ./services/user-service
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/ticket-booking-user-service:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push event-service
      uses: docker/build-push-action@v5
      with:
        context: ./services/event-service
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/ticket-booking-event-service:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push booking-service
      uses: docker/build-push-action@v5
      with:
        context: ./services/booking-service
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/ticket-booking-booking-service:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push api-gateway
      uses: docker/build-push-action@v5
      with:
        context: ./api-gateway
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/ticket-booking-api-gateway:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging environment
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment logic here
        # This could be deploying to a staging Kubernetes cluster
        # or running docker-compose on a staging server

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to production environment
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment logic here
        # This could be deploying to a production Kubernetes cluster
        # or running docker-compose on a production server 